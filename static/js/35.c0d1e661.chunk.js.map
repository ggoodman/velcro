{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"mappings":"iIAAA,qFAKO,IAAIA,EAAO,CACdC,SAAU,CACNC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,MAEzBC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,OAGlBE,EAAW,CAClBC,aAAc,GACdC,aAAc,aACdC,YAAY,EACZR,SAAU,CACN,CAAEE,KAAM,IAAKC,MAAO,IAAKM,MAAO,mBAChC,CAAEP,KAAM,IAAKC,MAAO,IAAKM,MAAO,oBAChC,CAAEP,KAAM,IAAKC,MAAO,IAAKM,MAAO,yBAChC,CAAEP,KAAM,IAAKC,MAAO,IAAKM,MAAO,oBAEpCC,SAAU,CACN,QAAS,QAAS,OAAQ,QAAS,OAAQ,MAC3C,OAAQ,MAAO,OAAQ,WAAY,KAAM,KAAM,MAC/C,KAAM,SAAU,SAAU,OAAQ,OAAQ,OAAQ,MAClD,QAAS,OAAQ,SAAU,OAAQ,eAEvCC,aAAc,CACV,OAAQ,MAAO,OAAQ,MAAO,MAAO,SACrC,SAAU,OAAQ,UAAW,MAAO,MAAO,OAE/CC,UAAW,CACP,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,IAAK,KAAM,MAAO,MAAO,KAC1D,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGvCC,QAAS,wBAETC,UAAW,CACPC,KAAM,CAEF,CAAC,iBAAkB,CACXC,MAAO,CACH,YAAa,CAAEP,MAAO,cACtB,WAAY,gBAIxB,CAAEQ,QAAS,eAEX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CAAC,WAAY,CACLD,MAAO,CACH,aAAc,YACd,WAAY,MAIxB,CAAC,2BAA4B,gBAC7B,CAAC,sBAAuB,cACxB,CAAC,MAAO,UAER,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,WAEhB,CAAC,WAAY,UACb,CAAC,IAAK,kBACN,CAAC,QAAS,WAGdE,QAAS,CACL,CAAC,WAAY,WAEb,CAAC,OAAQ,UAAW,QACpB,CAAC,OAAQ,YAEbC,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,MAAO,yBACR,CAAC,IAAK,CAAEV,MAAO,eAAgBW,QAAS,SAAUC,KAAM,UAE5DC,WAAY,CACR,CAAC,aAAc,SACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW","file":"static/js/35.c0d1e661.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>'],\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: '\\'', close: '\\'' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.pascaligo',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'begin', 'block', 'case', 'const', 'else', 'end',\r\n        'fail', 'for', 'from', 'function', 'if', 'is', 'nil',\r\n        'of', 'remove', 'return', 'skip', 'then', 'type', 'var',\r\n        'while', 'with', 'option', 'None', 'transaction'\r\n    ],\r\n    typeKeywords: [\r\n        'bool', 'int', 'list', 'map', 'nat', 'record',\r\n        'string', 'unit', 'address', 'map', 'mtz', 'xtz'\r\n    ],\r\n    operators: [\r\n        '=', '>', '<', '<=', '>=', '<>', ':', ':=', 'and', 'mod', 'or',\r\n        '+', '-', '*', '/', '@', '&', '^', '%'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_][\\w]*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        /* */\r\n        comment: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\(\\*/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\(\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":""}