{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring"],"mappings":"iIAAA,qFAKO,IAAIA,EAAO,CACdC,SAAU,CACNC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEzBC,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEVC,iBAAkB,CACd,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAExBC,iBAAkB,CACd,CAAEF,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAMC,MAAO,MAEzBE,QAAS,CACLC,QAAS,CACLC,MAAO,IAAIC,OAAO,0DAClBC,IAAK,IAAID,OAAO,mEAIjBE,EAAW,CAClBC,aAAc,GACdC,aAAc,MACdC,SAAU,CACN,WAAY,MAAO,SAAU,KAC7B,SAAU,MAAO,OAAQ,QACzB,QAAS,UAAW,YACpB,QAAS,aAAc,cACvB,WAAY,QAAS,UACrB,WAAY,KAAM,OAAQ,WAC1B,SAAU,OAAQ,OAAQ,MAC1B,YAAa,QAAS,QAAS,WAC/B,SAAU,QAAS,UAAW,MAC9B,MAAO,WAAY,QAAS,UAC5B,SAAU,KAAM,KAAM,UAAW,UACjC,SAAU,YAAa,WAAY,OACnC,MAAO,MAAO,MAAO,OAAQ,OAAQ,MACrC,QAAS,SAAU,MAAO,SAAU,UACpC,YAAa,SAAU,QAAS,MAAO,MACvC,OAAQ,KAAM,OAAQ,KAAM,SAC5B,WAAY,UAAW,WAAY,UACnC,YAAa,OAAQ,SAAU,MAAO,SACtC,SAAU,SAAU,SAAU,MAAO,OACrC,KAAM,OAAQ,WAAY,QAC1B,MAAO,OAAQ,SAAU,MACzB,MAAO,OAAQ,UAAW,WAC1B,OAAQ,QAAS,OAAQ,SAG7BC,QAAS,4BACTC,QAAS,wEACTC,cAAe,iBACfC,YAAa,UAEbC,UAAW,CACPC,KAAM,CAEF,CAAC,eAAgB,CACTC,MAAO,CACH,YAAa,CAAEC,MAAO,cACtB,WAAY,gBAIxB,CAAEC,QAAS,eAEX,CAAC,WAAY,cAEb,CAAC,oBAAqB,WAEtB,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CAAC,WAAY,aAEb,CAAC,uCAAwC,gBACzC,CAAC,yCAA0C,gBAC3C,CAAC,mBAAoB,gBACrB,CAAC,iCAAkC,cACnC,CAAC,2BAA4B,cAC7B,CAAC,sBAAuB,UAExB,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBACpB,CAAC,MAAO,SAAU,eAClB,CAAC,IAAK,SAAU,aAEhB,CAAC,MAAO,CAAED,MAAO,eAAgBE,KAAM,eAEvC,CAAC,aAAc,UACf,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,WACjD,CAAC,IAAK,mBAEVC,WAAY,CACR,CAAC,aAAc,IACf,CAAC,aAAc,UAAW,YAC1B,CAAC,UAAW,YAEhBC,QAAS,CACL,CAAC,SAAU,WACX,CAAC,OAAQ,UAAW,QACpB,CAAC,KAAM,WACP,CAAC,SAAU,WACX,CAAC,KAAM,YAEXC,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,YAAa,CACNN,MAAO,CACH,UAAW,CAAEC,MAAO,SAAUE,KAAM,QACpC,WAAY,aAI5BI,UAAW,CACP,CAAC,QAAS,UACV,CAAC,KAAM,iBACP,CAAC,IAAK,CAAEN,MAAO,eAAgBE,KAAM","file":"static/js/19.4bd01c0b.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.fs',\r\n    keywords: [\r\n        'abstract', 'and', 'atomic', 'as',\r\n        'assert', 'asr', 'base', 'begin',\r\n        'break', 'checked', 'component',\r\n        'const', 'constraint', 'constructor',\r\n        'continue', 'class', 'default',\r\n        'delegate', 'do', 'done', 'downcast',\r\n        'downto', 'elif', 'else', 'end',\r\n        'exception', 'eager', 'event', 'external',\r\n        'extern', 'false', 'finally', 'for',\r\n        'fun', 'function', 'fixed', 'functor',\r\n        'global', 'if', 'in', 'include', 'inherit',\r\n        'inline', 'interface', 'internal', 'land',\r\n        'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let',\r\n        'match', 'member', 'mod', 'module', 'mutable',\r\n        'namespace', 'method', 'mixin', 'new', 'not',\r\n        'null', 'of', 'open', 'or', 'object',\r\n        'override', 'private', 'parallel', 'process',\r\n        'protected', 'pure', 'public', 'rec', 'return',\r\n        'static', 'sealed', 'struct', 'sig', 'then',\r\n        'to', 'true', 'tailcall', 'trait',\r\n        'try', 'type', 'upcast', 'use',\r\n        'val', 'void', 'virtual', 'volatile',\r\n        'when', 'while', 'with', 'yield'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    integersuffix: /[uU]?[yslnLI]?/,\r\n    floatsuffix: /[fFmM]?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // [< attributes >].\r\n            [/\\[<.*>\\]/, 'annotation'],\r\n            // Preprocessor directive\r\n            [/^#(if|else|endif)/, 'keyword'],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+LF/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\r\n            [/0b[0-1]+(@integersuffix)/, 'number.bin'],\r\n            [/\\d+(@integersuffix)/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"\"\"/, 'string', '@string.\"\"\"'],\r\n            [/\"/, 'string', '@string.\"'],\r\n            // literal string\r\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\r\n            // characters\r\n            [/'[^\\\\']'B?/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\(\\*(?!\\))/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^*(]+/, 'comment'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment'],\r\n            [/\\(\\*\\)/, 'comment'],\r\n            [/\\(/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/(\"\"\"|\"B?)/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        litstring: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\"\"/, 'string.escape'],\r\n            [/\"/, { token: 'string.quote', next: '@pop' }]\r\n        ],\r\n    },\r\n};\r\n"],"sourceRoot":""}